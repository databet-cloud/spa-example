// Code generated by MockGen. DO NOT EDIT.
// Source: net/http (interfaces: RoundTripper)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// RoundTripper is a mock of RoundTripper interface.
type RoundTripper struct {
	ctrl     *gomock.Controller
	recorder *RoundTripperMockRecorder
}

// RoundTripperMockRecorder is the mock recorder for RoundTripper.
type RoundTripperMockRecorder struct {
	mock *RoundTripper
}

// NewRoundTripper creates a new mock instance.
func NewRoundTripper(ctrl *gomock.Controller) *RoundTripper {
	mock := &RoundTripper{ctrl: ctrl}
	mock.recorder = &RoundTripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RoundTripper) EXPECT() *RoundTripperMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *RoundTripper) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *RoundTripperMockRecorder) RoundTrip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*RoundTripper)(nil).RoundTrip), arg0)
}

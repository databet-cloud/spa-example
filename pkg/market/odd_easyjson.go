// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package market

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4f6d4409DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket(in *jlexer.Lexer, out *Odds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(Odds)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 Odd
			(v1).UnmarshalEasyJSON(in)
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f6d4409EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket(out *jwriter.Writer, in Odds) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			(v2Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Odds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4f6d4409EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Odds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4f6d4409DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket(l, v)
}
func easyjson4f6d4409DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(in *jlexer.Lexer, out *Odd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "status":
			out.Status = OddStatus(in.Int())
		case "value":
			out.Value = string(in.String())
		case "status_reason":
			out.StatusReason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f6d4409EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(out *jwriter.Writer, in Odd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"status_reason\":"
		out.RawString(prefix)
		out.String(string(in.StatusReason))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Odd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4f6d4409EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Odd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4f6d4409DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(l, v)
}

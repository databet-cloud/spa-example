// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package market

import (
	"encoding/json"

	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket(in *jlexer.Lexer, out *Market) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type_id":
			out.TypeID = int(in.Int())
		case "template":
			out.Template = string(in.String())
		case "status":
			out.Status = Status(in.Int())
		case "odds":
			(out.Odds).UnmarshalEasyJSON(in)
		case "specifiers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Specifiers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Specifiers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "meta":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Meta = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Meta)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "flags":
			out.Flags = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket(out *jwriter.Writer, in Market) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type_id\":"
		out.RawString(prefix)
		out.Int(int(in.TypeID))
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"odds\":"
		out.RawString(prefix)
		(in.Odds).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"specifiers\":"
		out.RawString(prefix)
		if in.Specifiers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Specifiers {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"meta\":"
		out.RawString(prefix)
		if in.Meta == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Meta {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Market) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Market) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Market) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Market) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket(l, v)
}
func easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(in *jlexer.Lexer, out *Markets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(Markets)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v5 Market
			(v5).UnmarshalEasyJSON(in)
			(*out)[key] = v5
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(out *jwriter.Writer, in Markets) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v6First := true
		for v6Name, v6Value := range in {
			if v6First {
				v6First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v6Name))
			out.RawByte(':')
			(v6Value).MarshalEasyJSON(out)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Markets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Markets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6e040014EncodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Markets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Markets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6e040014DecodeGithubComDatabetCloudDatabetGoSdkPkgMarket1(l, v)
}

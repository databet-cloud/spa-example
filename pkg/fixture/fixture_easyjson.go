// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fixture

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture(in *jlexer.Lexer, out *Fixture) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "owner_id":
			out.OwnerID = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "type":
			out.Type = int(in.Int())
		case "sport_id":
			out.SportID = string(in.String())
		case "tournament":
			easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(in, &out.Tournament)
		case "venue":
			easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture2(in, &out.Venue)
		case "competitors":
			(out.Competitors).UnmarshalEasyJSON(in)
		case "streams":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Streams = make(Streams)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Stream
					(v1).UnmarshalEasyJSON(in)
					(out.Streams)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "live_coverage":
			out.LiveCoverage = bool(in.Bool())
		case "start_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "flags":
			out.Flags = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "published_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PublishedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture(out *jwriter.Writer, in Fixture) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.String(string(in.OwnerID))
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"sport_id\":"
		out.RawString(prefix)
		out.String(string(in.SportID))
	}
	{
		const prefix string = ",\"tournament\":"
		out.RawString(prefix)
		easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(out, in.Tournament)
	}
	{
		const prefix string = ",\"venue\":"
		out.RawString(prefix)
		easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture2(out, in.Venue)
	}
	{
		const prefix string = ",\"competitors\":"
		out.RawString(prefix)
		(in.Competitors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"streams\":"
		out.RawString(prefix)
		if in.Streams == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Streams {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				(v2Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"live_coverage\":"
		out.RawString(prefix)
		out.Bool(bool(in.LiveCoverage))
	}
	{
		const prefix string = ",\"start_time\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"published_at\":"
		out.RawString(prefix)
		out.Raw((in.PublishedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fixture) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fixture) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture(l, v)
}
func easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture2(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture2(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}
func easyjson8f177a29DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(in *jlexer.Lexer, out *Tournament) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "master_id":
			out.MasterID = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8f177a29EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(out *jwriter.Writer, in Tournament) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"master_id\":"
		out.RawString(prefix)
		out.String(string(in.MasterID))
	}
	{
		const prefix string = ",\"country_code\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	out.RawByte('}')
}

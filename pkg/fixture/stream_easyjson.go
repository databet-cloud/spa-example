// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package fixture

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB57f4468DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture(in *jlexer.Lexer, out *Stream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "locale":
			out.Locale = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "platforms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Platforms = make(Platforms)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Platform
					easyjsonB57f4468DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(in, &v1)
					(out.Platforms)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture(out *jwriter.Writer, in Stream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"platforms\":"
		out.RawString(prefix)
		if in.Platforms == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Platforms {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				easyjsonB57f4468EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(out, v2Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB57f4468EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB57f4468EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB57f4468DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB57f4468DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture(l, v)
}
func easyjsonB57f4468DecodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(in *jlexer.Lexer, out *Platform) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "allowed_countries":
			if in.IsNull() {
				in.Skip()
				out.AllowedCountries = nil
			} else {
				in.Delim('[')
				if out.AllowedCountries == nil {
					if !in.IsDelim(']') {
						out.AllowedCountries = make([]string, 0, 4)
					} else {
						out.AllowedCountries = []string{}
					}
				} else {
					out.AllowedCountries = (out.AllowedCountries)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.AllowedCountries = append(out.AllowedCountries, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB57f4468EncodeGithubComDatabetCloudDatabetGoSdkPkgFixture1(out *jwriter.Writer, in Platform) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"allowed_countries\":"
		out.RawString(prefix)
		if in.AllowedCountries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.AllowedCountries {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	out.RawByte('}')
}
